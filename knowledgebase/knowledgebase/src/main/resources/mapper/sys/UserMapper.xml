<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hg.knowledgebase.module.sys.mapper.IUserMapper" >
    <!--  结果用户扩展map -->
    <resultMap type="UserVO" id="userVOMap">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="nick_name" property="nickName"/>
        <result column="phone" property="phone"/>
        <result column="mail" property="mail"/>
        <result column="dept_id" property="deptId"/>
        <result column="dept_name" property="deptName"/>
        <result column="role_name" property="roleName"/>
        <result column="role_id" property="roleId"/>
        <result column="portrait" property="portrait"/>
        <result column="status" property="status"/>
        <result column="sex" property="sex"/>
        <result column="create_user" property="createUser"/>
        <result column="create_time" property="createTime"/>
        <result column="role_status" property="roleStatus"/>
    </resultMap>
    
    <!--  结果基础用户扩展map -->
    <resultMap type="User" id="baseUserMap">
        <id column="id" property="id"/>
        <result column="dept_id" property="deptId"/>
        <result column="name" property="name"/>
        <result column="nick_name" property="nickName"/>
        <result column="role_id" property="roleId"/>
    </resultMap>
    
    <!-- 插入用户 -->
    <insert id="insertUser" parameterType="User">
        INSERT INTO sys_user
        ( name, password, nick_name, phone, portrait, id, dept_id, role_id, sex, mail, create_user)
        VALUES
        ( #{name}, #{password}, #{nickName}, #{phone}, #{portrait}, #{id}, #{deptId}, #{roleId}, #{sex}, #{mail}, #{createUser})
    </insert>
    
    <!-- 批量插入用户 -->
    <insert id="insertBatchUser" parameterType="java.util.List">
        INSERT INTO sys_user
        ( name, password, nick_name, phone, portrait, id, dept_id, role_id, sex, mail, create_user)
        VALUES
        <foreach collection="users" item="user" separator="," close=";">
            ( #{user.name}, #{user.password}, #{user.nickName}, #{user.phone}, 
            #{user.portrait}, #{user.id}, #{user.deptId}, #{user.roleId}, #{user.sex}, #{user.mail}, #{user.createUser})
        </foreach>
    </insert>
    
    <!-- 根据id删除用户(禁止删除系统用户) -->
    <delete id="deleteUserById" parameterType="String">
        DELETE 
        FROM
            sys_user 
        WHERE
            type = 0 
            AND id = #{id}
    </delete>
    
    <!-- 根据id批量删除用户(禁止删除系统用户) -->
    <delete id="deleteBatchUserById" parameterType="java.util.List">
        DELETE 
        FROM
            sys_user 
        WHERE
            type = 0 
            <foreach collection="ids" item="id" separator="or" open=" and (" close=")">
                id = #{id}
            </foreach>
    </delete>
    
    <!-- 修改用户 -->
    <update id="updateUser" parameterType="User">
        UPDATE sys_user 
        SET
        <trim suffixOverrides=",">
            <if test="name != null">
                name = #{name},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="mail != null">
                mail = #{mail},
            </if>
            <if test="portrait != null">
                portrait = #{portrait},
            </if>
            <if test="deptId != null">
                dept_id = #{deptId},
            </if>
            <if test="roleId != null">
                role_id = #{roleId},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
        </trim>
        WHERE
            id = #{id}
    </update>
    
    <!-- 修改用户密码 -->
    <update id="updateUserPwd">
        UPDATE sys_user 
        SET
            password = #{password}
        <where>
            <foreach collection="ids" item="id" separator="or">
                id = #{id}
            </foreach>
        </where>
    </update>
    
    <!-- 根据手机或者邮件修改密码 -->
    <update id="updateUserPasswordByPhoneOrMail">
        UPDATE sys_user 
        SET
            password = #{password}
        WHERE
        <choose>
            <when test="phone != null">
                phone = #{phone}
            </when>
            <when test="mail != null">
                mail = #{mail}
            </when>
            <otherwise>
                mail = #{mail}
            </otherwise>
        </choose>
    </update>
    
    <!-- 根据id查询用户 -->
    <select id="selectUserById" parameterType="String" resultMap="userVOMap">
        SELECT
            su.id,
            su.name,
            su.sex,
            su.nick_name,
            su.phone,
            su.mail,
            su.portrait,
            su.status,
            su.dept_id,
            su.role_id,
            sd.name AS dept_name,
            sr.name AS role_name 
        FROM
            sys_user AS su
            LEFT JOIN sys_dept AS sd ON sd.id = su.dept_id
            LEFT JOIN sys_role AS sr ON sr.id = su.role_id 
        WHERE
            su.id = #{id}
    </select>
    
    <!-- 根据登录名查询用户 -->
    <select id="selectUserByName" parameterType="String" resultMap="userVOMap">
        SELECT
            su.id,
            su.name,
            su.password,
            su.status,
            su.nick_name,
            su.portrait,
            sr.name AS role_name,
            sr.status AS role_status,
            sd.name AS dept_name
        FROM
            sys_user AS su
            LEFT JOIN sys_role AS sr ON sr.id = su.role_id
            LEFT JOIN sys_dept AS sd ON sd.id = su.dept_id
        WHERE
            su.name = #{name}
    </select>
    
    <!-- 根据用户名和密码查询用户 -->
    <select id="selectUserByNameAndPwd" parameterType="String" resultMap="userVOMap">
        SELECT
            su.id,
            su.name,
            su.status,
            su.nick_name,
            su.portrait,
            sr.name AS role_name,
            sr.status AS role_status,
            sd.name AS dept_name
        FROM
            sys_user AS su
            LEFT JOIN sys_role AS sr ON sr.id = su.role_id
            LEFT JOIN sys_dept AS sd ON sd.id = su.dept_id
        WHERE
            su.name = #{name} AND su.password = #{password}
    </select>
    
    <!-- 查询所有用户 -->
    <select id="selectUserList" parameterType="User" resultMap="userVOMap">
        SELECT
            su.id,
            su.NAME,
            su.sex,
            su.nick_name,
            su.phone,
            su.mail,
            su.portrait,
            su.status,
            su.dept_id,
            su.role_id,
            sd.name AS dept_name,
            sr.name AS role_name 
        FROM
            sys_user AS su
            LEFT JOIN sys_dept AS sd ON sd.id = su.dept_id
            LEFT JOIN sys_role AS sr ON sr.id = su.role_id 
        <where>
            <if test="status != null">
                AND su.status = #{status}
            </if>
            <if test="deptId != null and deptId != ''">
                AND su.dept_id = #{deptId}
            </if>
            <if test="roleId != null and roleId != ''">
                AND su.role_id = #{roleId}
            </if>
            <if test="sex != null">
                AND su.sex = #{sex}
            </if>
            <if test="nickName != null and nickName != ''">
                AND su.nick_name LIKE CONCAT('%',#{nickName},'%')
            </if>
            <if test="beginCreateTime != null and endCreateTime != null">
                AND su.create_time BETWEEN #{beginCreateTime} AND #{endCreateTime}
            </if>
        </where>
       <!--  因为批量导入数据会存在创建时间相同，所有追加了一个id排序 -->
        ORDER BY su.create_time,su.id DESC
    </select>
    
    <!-- 查询所有基础用户 -->
    <select id="selectBaseUserList" parameterType="UserVO" resultMap="baseUserMap">
        SELECT
            id,
            NAME,
            nick_name,
            portrait
        FROM
            sys_user
        <where>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="deptId != null and deptId != ''">
                AND dept_id = #{deptId}
            </if>
            <if test="roleId != null and roleId != ''">
                AND role_id = #{roleId}
            </if>
            <if test="sex != null">
                AND sex = #{sex}
            </if>
            <if test="nickName != null and nickName != ''">
                AND nick_name LIKE CONCAT('%',#{nickName},'%')
            </if>
            <if test="ids != null">
                <foreach collection="ids" item="id" open=" AND (" separator="or" close=")">
                    id = #{id}
                </foreach>
            </if>
            <if test="beginCreateTime != null and endCreateTime != null">
                AND create_time BETWEEN #{beginCreateTime} AND #{endCreateTime}
            </if>
        </where>
        ORDER BY create_time DESC
    </select>
    
    <!-- 查询用户总数 -->
    <select id="selectUserCount" resultType="int" parameterType="User">
        SELECT
            count( id ) 
        FROM
            sys_user
        <where>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="sex != null">
                AND sex = #{sex}
            </if>
            <if test="deptId != null and deptId != ''">
                AND dept_id = #{deptId}
            </if>
            <if test="beginCreateTime != null and endCreateTime != null">
                AND create_time BETWEEN #{beginCreateTime} AND #{endCreateTime}
            </if>
        </where>
    </select>
    
    <!-- 获取性别分组 -->
    <select id="selectSexGroup" parameterType="User" resultType="java.util.Map">
        SELECT
            sum( CASE WHEN su.sex = 0 THEN count ELSE 0 END ) AS "男",
            sum( CASE WHEN su.sex = 1 THEN count ELSE 0 END ) AS "女" 
        FROM
            ( 
            SELECT sex, count( 1 ) FROM sys_user
            <where>
                <if test="status != null">
	                AND status = #{status}
	            </if>
	            <if test="deptId != null and deptId != ''">
	                AND dept_id = #{deptId}
	            </if>
	            <if test="beginCreateTime != null and endCreateTime != null">
	                AND create_time BETWEEN #{beginCreateTime} AND #{endCreateTime}
	            </if>
            </where>
            GROUP BY sex 
            ) AS su
    </select>
</mapper>